// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: pb/proto/ListingsDatabase.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListingsDatabaseClient is the client API for ListingsDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingsDatabaseClient interface {
	//
	//the "save listings" protocol sends an unconstrained amount of newly
	//discovered listings to the database to be saved.
	SaveListings(ctx context.Context, opts ...grpc.CallOption) (ListingsDatabase_SaveListingsClient, error)
	//
	//the "update listings" protocol updates the records of pre-existing
	//listings in the database
	UpdateListings(ctx context.Context, opts ...grpc.CallOption) (ListingsDatabase_UpdateListingsClient, error)
	//
	//the "cull listings" protocol deletes all listings in the database at are
	//over a certain age
	CullListings(ctx context.Context, in *CullListingsRequest, opts ...grpc.CallOption) (*CullListingsResponse, error)
	//
	//pulls a limited amount of listings, usually for display on a web-page.
	//Sorting method and other factors that choose the specific items are
	//arbitrary as of writing this comment
	ManyListings(ctx context.Context, in *ManyListingsRequest, opts ...grpc.CallOption) (*ManyListingsResponse, error)
	//
	//FetchListing retrieves a specific listing by ID from the database
	FetchListing(ctx context.Context, in *FetchListingRequest, opts ...grpc.CallOption) (*RedditContent, error)
}

type listingsDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewListingsDatabaseClient(cc grpc.ClientConnInterface) ListingsDatabaseClient {
	return &listingsDatabaseClient{cc}
}

func (c *listingsDatabaseClient) SaveListings(ctx context.Context, opts ...grpc.CallOption) (ListingsDatabase_SaveListingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ListingsDatabase_ServiceDesc.Streams[0], "/ListingsDatabase/SaveListings", opts...)
	if err != nil {
		return nil, err
	}
	x := &listingsDatabaseSaveListingsClient{stream}
	return x, nil
}

type ListingsDatabase_SaveListingsClient interface {
	Send(*RedditContent) error
	CloseAndRecv() (*SaveListingsResponse, error)
	grpc.ClientStream
}

type listingsDatabaseSaveListingsClient struct {
	grpc.ClientStream
}

func (x *listingsDatabaseSaveListingsClient) Send(m *RedditContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listingsDatabaseSaveListingsClient) CloseAndRecv() (*SaveListingsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveListingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listingsDatabaseClient) UpdateListings(ctx context.Context, opts ...grpc.CallOption) (ListingsDatabase_UpdateListingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ListingsDatabase_ServiceDesc.Streams[1], "/ListingsDatabase/UpdateListings", opts...)
	if err != nil {
		return nil, err
	}
	x := &listingsDatabaseUpdateListingsClient{stream}
	return x, nil
}

type ListingsDatabase_UpdateListingsClient interface {
	Send(*RedditContent) error
	CloseAndRecv() (*UpdateListingsResponse, error)
	grpc.ClientStream
}

type listingsDatabaseUpdateListingsClient struct {
	grpc.ClientStream
}

func (x *listingsDatabaseUpdateListingsClient) Send(m *RedditContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listingsDatabaseUpdateListingsClient) CloseAndRecv() (*UpdateListingsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateListingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listingsDatabaseClient) CullListings(ctx context.Context, in *CullListingsRequest, opts ...grpc.CallOption) (*CullListingsResponse, error) {
	out := new(CullListingsResponse)
	err := c.cc.Invoke(ctx, "/ListingsDatabase/CullListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsDatabaseClient) ManyListings(ctx context.Context, in *ManyListingsRequest, opts ...grpc.CallOption) (*ManyListingsResponse, error) {
	out := new(ManyListingsResponse)
	err := c.cc.Invoke(ctx, "/ListingsDatabase/ManyListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsDatabaseClient) FetchListing(ctx context.Context, in *FetchListingRequest, opts ...grpc.CallOption) (*RedditContent, error) {
	out := new(RedditContent)
	err := c.cc.Invoke(ctx, "/ListingsDatabase/FetchListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingsDatabaseServer is the server API for ListingsDatabase service.
// All implementations must embed UnimplementedListingsDatabaseServer
// for forward compatibility
type ListingsDatabaseServer interface {
	//
	//the "save listings" protocol sends an unconstrained amount of newly
	//discovered listings to the database to be saved.
	SaveListings(ListingsDatabase_SaveListingsServer) error
	//
	//the "update listings" protocol updates the records of pre-existing
	//listings in the database
	UpdateListings(ListingsDatabase_UpdateListingsServer) error
	//
	//the "cull listings" protocol deletes all listings in the database at are
	//over a certain age
	CullListings(context.Context, *CullListingsRequest) (*CullListingsResponse, error)
	//
	//pulls a limited amount of listings, usually for display on a web-page.
	//Sorting method and other factors that choose the specific items are
	//arbitrary as of writing this comment
	ManyListings(context.Context, *ManyListingsRequest) (*ManyListingsResponse, error)
	//
	//FetchListing retrieves a specific listing by ID from the database
	FetchListing(context.Context, *FetchListingRequest) (*RedditContent, error)
	mustEmbedUnimplementedListingsDatabaseServer()
}

// UnimplementedListingsDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedListingsDatabaseServer struct {
}

func (UnimplementedListingsDatabaseServer) SaveListings(ListingsDatabase_SaveListingsServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveListings not implemented")
}
func (UnimplementedListingsDatabaseServer) UpdateListings(ListingsDatabase_UpdateListingsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateListings not implemented")
}
func (UnimplementedListingsDatabaseServer) CullListings(context.Context, *CullListingsRequest) (*CullListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CullListings not implemented")
}
func (UnimplementedListingsDatabaseServer) ManyListings(context.Context, *ManyListingsRequest) (*ManyListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManyListings not implemented")
}
func (UnimplementedListingsDatabaseServer) FetchListing(context.Context, *FetchListingRequest) (*RedditContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchListing not implemented")
}
func (UnimplementedListingsDatabaseServer) mustEmbedUnimplementedListingsDatabaseServer() {}

// UnsafeListingsDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingsDatabaseServer will
// result in compilation errors.
type UnsafeListingsDatabaseServer interface {
	mustEmbedUnimplementedListingsDatabaseServer()
}

func RegisterListingsDatabaseServer(s grpc.ServiceRegistrar, srv ListingsDatabaseServer) {
	s.RegisterService(&ListingsDatabase_ServiceDesc, srv)
}

func _ListingsDatabase_SaveListings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListingsDatabaseServer).SaveListings(&listingsDatabaseSaveListingsServer{stream})
}

type ListingsDatabase_SaveListingsServer interface {
	SendAndClose(*SaveListingsResponse) error
	Recv() (*RedditContent, error)
	grpc.ServerStream
}

type listingsDatabaseSaveListingsServer struct {
	grpc.ServerStream
}

func (x *listingsDatabaseSaveListingsServer) SendAndClose(m *SaveListingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listingsDatabaseSaveListingsServer) Recv() (*RedditContent, error) {
	m := new(RedditContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ListingsDatabase_UpdateListings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListingsDatabaseServer).UpdateListings(&listingsDatabaseUpdateListingsServer{stream})
}

type ListingsDatabase_UpdateListingsServer interface {
	SendAndClose(*UpdateListingsResponse) error
	Recv() (*RedditContent, error)
	grpc.ServerStream
}

type listingsDatabaseUpdateListingsServer struct {
	grpc.ServerStream
}

func (x *listingsDatabaseUpdateListingsServer) SendAndClose(m *UpdateListingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listingsDatabaseUpdateListingsServer) Recv() (*RedditContent, error) {
	m := new(RedditContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ListingsDatabase_CullListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CullListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsDatabaseServer).CullListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListingsDatabase/CullListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsDatabaseServer).CullListings(ctx, req.(*CullListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsDatabase_ManyListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManyListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsDatabaseServer).ManyListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListingsDatabase/ManyListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsDatabaseServer).ManyListings(ctx, req.(*ManyListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsDatabase_FetchListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsDatabaseServer).FetchListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListingsDatabase/FetchListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsDatabaseServer).FetchListing(ctx, req.(*FetchListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingsDatabase_ServiceDesc is the grpc.ServiceDesc for ListingsDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingsDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ListingsDatabase",
	HandlerType: (*ListingsDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CullListings",
			Handler:    _ListingsDatabase_CullListings_Handler,
		},
		{
			MethodName: "ManyListings",
			Handler:    _ListingsDatabase_ManyListings_Handler,
		},
		{
			MethodName: "FetchListing",
			Handler:    _ListingsDatabase_FetchListing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveListings",
			Handler:       _ListingsDatabase_SaveListings_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateListings",
			Handler:       _ListingsDatabase_UpdateListings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/proto/ListingsDatabase.proto",
}
